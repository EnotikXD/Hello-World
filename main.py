#–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import types, executor, Bot, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from openpyxl import load_workbook

#–¢–æ–∫–µ–Ω
TOKEN_API = "7070062861:AAFsL-BiesivWl0HLhBYvn2PvsqiC1grALU"

#–ë–∞–∑–∞ –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=storage)

#–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class ProfileStatesGroup(StatesGroup):

    name = State()
    locate = State()
    problem = State()
    

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏
def get_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('‚öôÔ∏è–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É‚öôÔ∏è'))
    return kb

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–±–ª–µ–º
def get_kb2() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ü—Ä–∏–Ω—Ç–µ—Äüí£'))
    kb.add(KeyboardButton('–í–ª–µ—Ç–µ–ª –∫–æ–º–ø—å—é—Ç–µ—Äüí•'))
    kb.add(KeyboardButton('–ò–Ω—Ç–µ—Ä–Ω–µ—Ç r.i.p‚ò†Ô∏è'))
    kb.add(KeyboardButton('–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞üõ†'))
    return kb

#–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∞
ikb = InlineKeyboardMarkup(row_width=2)
ibut1 = InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å‚úÖ", callback_data="yes")
ikb.add(ibut1)

#–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message) -> None:
    await message.answer('–ù–∞–∂–º–∏ –Ω–∞ "–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É", –∏ –æ–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É', reply_markup=get_kb())

#–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞—Ç—å
@dp.message_handler(text=['‚öôÔ∏è–û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É‚öôÔ∏è'])
async def cmd_create(message: types.Message) -> None:
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –§–ò–û")
    await ProfileStatesGroup.name.set()  # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º—è

#–í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
@dp.message_handler(state=ProfileStatesGroup.name)
async def load_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer('–ú–µ—Å—Ç–æ –ø—Ä–æ–±–ª–µ–º—ãüìç')
    await ProfileStatesGroup.next()

#–í–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
@dp.message_handler(state=ProfileStatesGroup.locate)
async def load_age(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['locate'] = message.text

    await message.answer('–° –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å ?', reply_markup=get_kb2())
    await ProfileStatesGroup.next()

#–í—ã–±–æ—Ä –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
@dp.message_handler(state=ProfileStatesGroup.problem, text = ['–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞üõ†'])
async def load_desc(message: types.Message, state: FSMContext) -> None:
    await message.answer('–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É')
    async with state.proxy() as data:
        data['problem'] = message.text
    

#–í–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
@dp.message_handler(state=ProfileStatesGroup.problem)
async def load_desc(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['problem'] = message.text
        #–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await bot.send_message(chat_id=message.from_user.id, text=f"******************************\n\n–ò–º—è: {data['name']}\n–ú–µ—Å—Ç–æ: {data['locate']}\n–ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n\n******************************", reply_markup=get_kb())
        
        await message.answer('–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!')

        #–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É
        await bot.send_message(chat_id="808721429", text=f"******************************\n\n–ò–º—è: {data['name']}\n–ú–µ—Å—Ç–æ: {data['locate']}\n–ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n\n******************************", reply_markup=ikb)

        #–∑–∞–ø–∏—Å—å –≤ exel
        fn = "1.xlsx"
        wb = load_workbook(fn)
        ws = wb['data']
        ws.append([f"–ò–º—è",f"–ú–µ—Å—Ç–æ",f"–ü—Ä–æ–±–ª–µ–º–∞"])
        ws.append([f"{data['name']}",f"{data['locate']}",f"{data['problem']}"])
        ws.append([f"",f"",f""])
        wb.save(fn)
        wb.close()

        #–û—Ç–ø—Ä–∞–≤–∫–∞ exel —Ñ–∞–π–ª–∞
        await bot.send_document(chat_id= "808721429", document  = open('1.xlsx', 'rb')) 

    #–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()

#–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞, –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏(–∞–¥–º–∏–Ω)
@dp.callback_query_handler(text="yes")
async def dow(callback: types.CallbackQuery):
     await callback.message.delete()

#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
@dp.message_handler()
async def cmd_create(message: types.Message) -> None:
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞üò¢")
    await message.delete()

#–ë–∞–∑–∞ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)